<#@ output extension=".cs"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Collections.Generic"#>
<#
    int argnum = 9;
#>
using System;
using System.Threading.Tasks;
namespace optionalresulttest;

public static partial class Result
{
    public static T UnwrapOrElse<T, TErr>(this IResult<T, TErr> r, Func<TErr, T> f)
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return x.Get();
            case Err<T, TErr> x:
                return f(x.Get());
            default:
                throw new NotImplementedException();
        }
    }
    public static async Task<T> UnwrapOrElseAsync<T, TErr>(this IResult<T, TErr> r, Func<TErr, Task<T>> f)
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return x.Get();
            case Err<T, TErr> x:
                return await f(x.Get()).ConfigureAwait(false);
            default:
                throw new NotImplementedException();
        }
    }
<#foreach(var i in Enumerable.Range(1, 9)){#>
    public static T UnwrapOrElse<T, TErr, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>>(
        this IResult<T, TErr> r, Func<TErr, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>, T> f,
        <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x} arg{x}"))#>
        )
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return x.Get();
            case Err<T, TErr> x:
                return f(x.Get(), <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"arg{x}"))#>);
            default:
                throw new NotImplementedException();
        }
    }
    public static async Task<T> UnwrapOrElseAsync<T, TErr, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>>(
        this IResult<T, TErr> r, Func<TErr, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>, Task<T>> f,
        <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x} arg{x}"))#>
        )
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return x.Get();
            case Err<T, TErr> x:
               return await f(x.Get(), <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"arg{x}"))#>).ConfigureAwait(false);
            default:
                throw new NotImplementedException();
        }
    }
<#}#>
}