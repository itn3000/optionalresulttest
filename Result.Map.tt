<#@ output extension=".cs"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Collections.Generic"#>
<#
    int argnum = 9;
#>
using System;
using System.Threading.Tasks;
namespace optionalresulttest;

public static partial class Result
{
    public static IResult<TRet, TErr> Map<T, TErr, TRet>(this IResult<T, TErr> r, Func<T, TRet> f)
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return new Ok<TRet, TErr>(f(x.Get()));
            case Err<T, TErr> x:
                return new Err<TRet, TErr>(x.Get());
            default:
                throw new NotImplementedException();
        }
    }
    public static async Task<IResult<TRet, TErr>> MapAsync<T, TErr, TRet>(this IResult<T, TErr> r, Func<T, Task<TRet>> f)
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return new Ok<TRet, TErr>(await f(x.Get()).ConfigureAwait(false));
            case Err<T, TErr> x:
                return new Err<TRet, TErr>(x.Get());
            default:
                throw new NotImplementedException();
        }
    }
    public static IResult<T, TErrRet> MapErr<T, TErr, TErrRet>(this IResult<T, TErr> r, Func<TErr, TErrRet> f)
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return new Ok<T, TErrRet>(x.Get());
            case Err<T, TErr> x:
                return new Err<T, TErrRet>(f(x.Get()));
            default:
                throw new NotImplementedException();
        }
    }
    public static async Task<IResult<T, TErrRet>> MapErr<T, TErr, TErrRet>(this IResult<T, TErr> r, Func<TErr, Task<TErrRet>> f)
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return new Ok<T, TErrRet>(x.Get());
            case Err<T, TErr> x:
                return new Err<T, TErrRet>(await f(x.Get()).ConfigureAwait(false));
            default:
                throw new NotImplementedException();
        }
    }
<#foreach(var i in Enumerable.Range(1, 9)){#>
    public static IResult<TRet, TErr> Map<T, TErr, TRet, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>>(
        this IResult<T, TErr> r, Func<T, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>, TRet> f,
        <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x} arg{x}"))#>
        )
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return new Ok<TRet, TErr>(f(x.Get(), <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"arg{x}"))#>));
            case Err<T, TErr> x:
                return new Err<TRet, TErr>(x.Get());
            default:
                throw new NotImplementedException();
        }
    }
    public static async Task<IResult<TRet, TErr>> MapAsync<T, TErr, TRet, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>>(
        this IResult<T, TErr> r, Func<T, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>, Task<TRet>> f,
        <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x} arg{x}"))#>
        )
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return new Ok<TRet, TErr>(await f(x.Get(), <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"arg{x}"))#>).ConfigureAwait(false));
            case Err<T, TErr> x:
                return new Err<TRet, TErr>(x.Get());
            default:
                throw new NotImplementedException();
        }
    }
    public static IResult<T, TErrRet> MapErr<T, TErr, TErrRet, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>>(
        this IResult<T, TErr> r, Func<TErr, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>, TErrRet> f,
        <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x} arg{x}"))#>)
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return new Ok<T, TErrRet>(x.Get());
            case Err<T, TErr> x:
                return new Err<T, TErrRet>(f(x.Get(), <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"arg{x}"))#>));
            default:
                throw new NotImplementedException();
        }
    }
    public static async Task<IResult<T, TErrRet>> MapErr<T, TErr, TErrRet, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>>
        (this IResult<T, TErr> r, Func<TErr, <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x}"))#>, Task<TErrRet>> f,
        <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"TArg{x} arg{x}"))#>)
    {
        switch(r)
        {
            case Ok<T, TErr> x:
                return new Ok<T, TErrRet>(x.Get());
            case Err<T, TErr> x:
                return new Err<T, TErrRet>(await f(x.Get(), <#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"arg{x}"))#>).ConfigureAwait(false));
            default:
                throw new NotImplementedException();
        }
    }
<#}#>
}